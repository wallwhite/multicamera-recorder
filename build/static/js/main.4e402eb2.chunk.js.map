{"version":3,"sources":["components/Recorder.js","App.js","index.js"],"names":["Recorder","className","useState","isInited","setIsInited","isRecordingStarted","setIsRecordingStarted","isRecordingFinished","setIsRecordingFinished","isPlaying","setIsPlaying","screenVideoRef","useRef","cameraVideoRef","screenStreamRef","cameraStreamRef","screenRecorderRef","cameraRecorderRef","isAutoPlayRef","recordedBlob","setRecordedBlob","captureScreen","cb","success","error","displaymediastreamconstraints","video","navigator","mediaDevices","getDisplayMedia","then","catch","invokeGetDisplayMedia","screen","stream","callback","window","stopCallback","addEventListener","getTracks","forEach","track","console","alert","initRecorders","current","camera","cameraVideo","muted","srcObject","autoplay","RecordRTC","type","mimeType","screenVideo","getUserMedia","audio","handleStartRecording","e","a","preventDefault","Promise","all","startRecording","togglePlayPreview","pause","play","useEffect","ref","onPlay","onPause","onClick","stopPropagation","stopRecording","blob","getBlob","src","URL","createObjectURL","stop","disabled","href","download","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e402eb2.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport RecordRTC from 'recordrtc';\n\nconst Recorder = ({ className = '' }) => {\n    const [isInited, setIsInited] = useState(false);\n    const [isRecordingStarted, setIsRecordingStarted] = useState(false);\n    const [isRecordingFinished, setIsRecordingFinished] = useState(false);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const screenVideoRef = useRef();\n    const cameraVideoRef = useRef();\n    const screenStreamRef = useRef();\n    const cameraStreamRef = useRef();\n    const screenRecorderRef = useRef();\n    const cameraRecorderRef = useRef();\n    const isAutoPlayRef = useRef(false);\n    const [recordedBlob, setRecordedBlob] = useState(null);\n\n    const addStreamStopListener = (stream, callback) => {\n        stream.addEventListener('ended', () => {\n            callback();\n            callback = () => { };\n        }, false);\n        stream.addEventListener('inactive', () => {\n            callback();\n            callback = () => { };\n        }, false);\n        stream.getTracks().forEach((track) => {\n            track.addEventListener('ended', () => {\n                callback();\n                callback = () => { };\n            }, false);\n            track.addEventListener('inactive', () => {\n                callback();\n                callback = () => { };\n            }, false);\n        });\n    }\n\n    const invokeGetDisplayMedia = (success, error) => {\n        var displaymediastreamconstraints = {\n            video: {\n                displaySurface: 'monitor', // monitor, window, application, browser\n                logicalSurface: true,\n                cursor: 'always' // never, always, motion\n            }\n        };\n\n        displaymediastreamconstraints = {\n            video: true\n        };\n\n        if (navigator.mediaDevices.getDisplayMedia) {\n            navigator.mediaDevices.getDisplayMedia(displaymediastreamconstraints).then(success).catch(error);\n        }\n        else {\n            navigator.getDisplayMedia(displaymediastreamconstraints).then(success).catch(error);\n        }\n    }\n\n    const captureCamera = (cb) => {\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(cb);\n    }\n\n    const captureScreen = (cb) => {\n        invokeGetDisplayMedia((screen) => {\n            addStreamStopListener(screen, () => {\n                if (window.stopCallback) {\n                    window.stopCallback();\n                }\n\n            });\n            cb(screen);\n        }, (error) => {\n            console.error(error);\n            alert('Unable to capture your screen. Please check console logs.\\n' + error);\n        });\n    }\n\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const initRecorders = () => {\n        setIsInited(true);\n        isAutoPlayRef.current = true;\n        captureCamera((camera) => {\n            const { current: cameraVideo } = cameraVideoRef;\n\n            cameraVideo.muted = true;\n            cameraVideo.srcObject = camera;\n            cameraVideo.autoplay = true;\n            cameraStreamRef.current = camera;\n\n            cameraRecorderRef.current = RecordRTC(camera, {\n                type: 'video',\n                mimeType: 'video/webm',\n            });\n\n            captureScreen((screen) => {\n                const { current: screenVideo } = screenVideoRef;\n                setIsRecordingStarted(true);\n                screenStreamRef.current = screen;\n                screenVideo.muted = true;\n                screenVideo.autoplay = true;\n                screenVideo.srcObject = screen;\n\n                screenRecorderRef.current = RecordRTC(screen, {\n                    type: 'video',\n                    mimeType: 'video/webm',\n                });\n            });\n\n\n        });\n    }\n\n\n\n    const handleStartRecording = async (e) => {\n        e.preventDefault();\n        await Promise.all([\n            cameraRecorderRef.current.startRecording(),\n            screenRecorderRef.current.startRecording(),\n        ]);\n    }\n\n    const handleStopRecording = (e) => {\n        if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        const { current: cameraVideo } = cameraVideoRef;\n        const { current: screenVideo } = screenVideoRef;\n\n        cameraVideo.autoplay = false;\n        screenVideo.autoplay = false;\n\n        cameraRecorderRef.current.stopRecording(() => {\n\n\n            const blob = cameraRecorderRef.current.getBlob();\n            cameraVideo.srcObject = null;\n            cameraVideo.src = URL.createObjectURL(blob);\n            cameraVideo.muted = false;\n            setRecordedBlob(blob);\n\n            cameraStreamRef.current.getTracks().forEach((track) => {\n                track.stop();\n            });\n        });\n\n        screenRecorderRef.current.stopRecording(() => {\n\n            const blob = screenRecorderRef.current.getBlob();\n            screenVideo.srcObject = null;\n            screenVideo.src = URL.createObjectURL(blob);\n            screenVideo.muted = false;\n\n            screenStreamRef.current.getTracks().forEach((track) => {\n                track.stop();\n            });\n        });\n        setIsRecordingFinished(true);\n    }\n\n    const togglePlayPreview = async () => {\n        const { current: cameraVideo } = cameraVideoRef;\n        const { current: screenVideo } = screenVideoRef;\n\n\n        if (isPlaying) {\n            await Promise.all([\n                cameraVideo.pause(),\n                screenVideo.pause(),\n            ]);\n\n            return;\n        }\n\n        await Promise.all([\n            cameraVideo.play(),\n            screenVideo.play(),\n        ]);\n\n    }\n\n    const handlePlay = () => {\n        if (isRecordingFinished)\n            setIsPlaying(true)\n    }\n\n    const handlePause = () => {\n        if (isRecordingFinished)\n            setIsPlaying(false)\n\n    }\n\n    useEffect(() => {\n        if (!isInited) initRecorders();\n\n    }, [initRecorders, isInited]);\n\n    return (\n        <div>\n            <div className={`recorder_videos ${className}`}>\n                <video ref={screenVideoRef} onPlay={handlePlay} onPause={handlePause} className=\"recorder_videos__video\" />\n                <video ref={cameraVideoRef} className=\"recorder_videos__video\" />\n            </div>\n            <div className=\"recorder_controls\">\n                <button onClick={handleStartRecording}>Start recording</button>\n                <button onClick={handleStopRecording} disabled={!isRecordingStarted || isRecordingFinished}>Stop recording</button>\n                <button onClick={togglePlayPreview} disabled={!isRecordingFinished}>{isPlaying ? 'Pause' : 'Play'}</button>\n                {recordedBlob && (\n                    <a href={`${URL.createObjectURL(recordedBlob)}`} download=\"filename.mp4\">Download</a>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Recorder;","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport { Recorder } from './components'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Multicamera recorder demo\n        </p>\n      </header>\n      <Tabs>\n        <TabList>\n          <Tab>Simple</Tab>\n          <Tab>PiP simulation</Tab>\n        </TabList>\n\n        <TabPanel>\n          <Recorder />\n        </TabPanel>\n        <TabPanel>\n          <Recorder className=\"recorder-pip\" />\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}